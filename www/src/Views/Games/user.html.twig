{% extends 'Layouts/main.html.twig' %}

{% block content %}
<a href="/scraper/game.php?{{ {'userid': user_id, 'gameid': game.id}|url_encode }}"><i class="fa-solid fa-rotate"></i> Refresh</a>
<h1 class="text-xl mb-2">
    <strong class="line-clamp-1">{{ game.name }}
        {% if game.formatted_completed_at is not null %}
            <small>(<i class="fa-solid fa-crown"></i> {{ game.formatted_completed_at }})</small>
        {% endif %}
    </strong>
</h1>

<div id="app">
    <div class="sticky top-0 bg-neutral-950/90 p-2 z-50 backdrop-blur">
        <div class="w-full sm:w-3/5 flex mx-auto mb-2">
            <div class="text-xl bg-neutral-800 leading-5 text-center p-2">
                <i class="fa-solid fa-magnifying-glass"></i>
            </div>
            <input type="text" v-model="searchbox" class="w-full p-2 bg-neutral-800 text-white" placeholder="search" />
        </div>
        <div class="flex justify-center">
            <div class="basis-1/2 sm:basis-32">
                <input type="radio" value="locked" id="listMode2" v-model="listMode" class="hidden peer" />
                <label for="listMode2" class="peer-checked:text-orange-500 inline-block bg-neutral-500 peer-checked:bg-orange-900 p-2 w-full text-right">
                    locked<i class="fa-solid fa-lock ml-2"></i>
                </label>
            </div>
            <div class="basis-1/2 sm:basis-32">
                <input type="radio" value="achieved" id="listMode1" v-model="listMode" class="hidden peer" />
                <label for="listMode1" class="peer-checked:text-green-500 inline-block bg-neutral-500 peer-checked:bg-green-900 p-2 w-full text-left">
                    <i class="fa-solid fa-lock-open mr-2"></i>unlocked
                </label>
            </div>
        </div>
        <div class="flex mt-2">
            <div class="py-1 px-2 text-sm">Tags<i class="ml-1 fa-solid fa-tags"></i></div>
            {% for tag in tags %}
                <div>
                    <input type="radio" v-model="tagMode" class="hidden" value="{{ tag.id }}" id="tagMode{{ tag.id }}">
                    <label for="tagMode{{ tag.id }}" style="background-color: {{ tag.background_color }}" class="inline-block text-sm py-1 px-2 text-white" @click.prevent="checkTag($event)">
                        <i class="pointer-events-none fa-regular" :class="{'fa-square-check': tagMode == '{{ tag.id }}', 'fa-square': tagMode != '{{ tag.id }}'}"></i> {{ tag.name }}
                    </label>
                </div>
            {% endfor %}
        </div>
    </div>
    {% verbatim %}
        <div class="text-sm text-neutral-500 mb-2 text-center">
            {{ achievements.length }}/{{ originalAchievements.length }} Achievements
        </div>
        <div class="grid gap-1 grid-cols-1 md:grid-cols-2 xl:grid-cols-3">
            <div class="flex" v-for="achievement in achievements">
                <div class="flex flex-col justify-between bg-neutral-800 w-full pb-2 pr-2">
                    <div>
                        <div class="flex mb-2 pl-2">
                            <div
                                :style="{'background-image': `url(${achievement.correct_icon})`}"
                                class="w-8 h-8 hover:w-20 hover:h-20 bg-cover flex-none transition-all"
                            ></div>
                            <p class="text-md line-clamp-1 text-white px-2 pt-2" v-html="highlight(achievement.display_name)"></p>
                        </div>
                        <p class="text-sm line-clamp-2 hover:line-clamp-none text-neutral-400 px-2" v-html="highlight(achievement.description)"></p>
                    </div>
                    <div class="text-right text-xs text-neutral-500 mt-2" v-if="achievement.unlocked_at">
                        {{ achievement.unlocked_at }} <i class="fa-regular fa-clock"></i>
                    </div>
                </div>
            </div>
        </div>
    {% endverbatim %}
<script>
    const { createApp, ref, computed } = Vue

    createApp({
        setup() {
            const listMode = ref('locked')
            const tagMode =ref('all')
            const searchbox = ref('')
            const originalAchievements = [{{ achievements|raw }}]

            const achievements = computed(() => {
                return originalAchievements.filter((ach) => {
                    switch (listMode.value) {
                        case 'achieved': return ach.achieved;
                        case 'locked': return !ach.achieved;
                    }
                }).filter((a) => {
                    if(tagMode.value === 'all')
                        return true
                    else if(tagMode.value === '-1')
                        return a.tag_ids === null
                    else if(a.tag_ids === null)
                        return false
                    else
                        return a.tag_ids.includes(tagMode.value)
                }).filter((b) => {
                    if(searchbox.value.length === 0)
                        return true
                    let searchValue = searchbox.value.toLowerCase()
                    let achievementDisplayName = b.display_name.toLowerCase()
                    let achievementDescription = b.description ? b.description.toLowerCase() : ''
                    return achievementDisplayName.includes(searchValue) || achievementDescription.includes(searchValue)
                })
            })

            function highlight(name) {
                if(searchbox.value.length === 0)
                    return name
                return name ? name.replaceAll(new RegExp('(' + searchbox.value + ')', "ig"), '<span class="text-green-500">$1</span>') : '';
            }

            function checkTag(event) {
                let clickedValue = event.srcElement.control.value
                
                tagMode.value = tagMode.value === clickedValue ? 'all' : clickedValue
            }

            return {
                achievements, listMode, searchbox, highlight, tagMode, originalAchievements, checkTag
            }
        }
    }).mount('#app')
</script>
{% endblock %}
